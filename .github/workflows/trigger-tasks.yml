name: "trigger-tasks"

on:
  workflow_dispatch:
    inputs:
      variant_regexp:
        description: 'Regex pattern to match variants (e.g. ".*" or ".*no-config-defaults.*")'
        required: true
        default: '.*'
      blueprint_regexp:
        description: 'Regex pattern to match blueprints (e.g. ".*" or "k6/.*")'
        required: true
        default: 'k6/.*'
      versions:
        description: 'Comma-separated list of eRPC versions to test (e.g., ["latest","0.0.35","main"])'
        required: false
        default: '["latest","main"]'
      log_level:
        description: 'Select a log level (e.g info, debug, trace)'
        required: false
        default: 'disabled'

jobs:
  discover-matrix:
    runs-on: ubuntu-latest
    outputs:
      variants: ${{ steps.set-matrix.outputs.variants }}
      blueprints: ${{ steps.set-matrix.outputs.blueprints }}
    steps:
      - uses: actions/checkout@v3
      
      - id: set-matrix
        run: |
          # Discover variants matching the pattern
          VARIANTS=$(ls -d variants/*/*/ | cut -d'/' -f2,3 | grep -E "${{ github.event.inputs.variant_regexp }}" | jq -R -s -c 'split("\n")[:-1]')
          echo "variants=${VARIANTS}" >> $GITHUB_OUTPUT
          
          # Discover blueprints matching the pattern
          BLUEPRINTS=$(ls -d blueprints/*/* | cut -d'/' -f2,3 | grep -E "${{ github.event.inputs.blueprint_regexp }}" | jq -R -s -c 'split("\n")[:-1]')
          echo "blueprints=${BLUEPRINTS}" >> $GITHUB_OUTPUT

  run-test:
    needs: discover-matrix
    name: "${{ matrix.version }} | ${{ matrix.variant }} | ${{ matrix.blueprint }}"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: ${{ fromJson(github.event.inputs.versions) }}
        variant: ${{ fromJson(needs.discover-matrix.outputs.variants) }}
        blueprint: ${{ fromJson(needs.discover-matrix.outputs.blueprints) }}
        job-index: [0]
      fail-fast: true
      max-parallel: 4

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install k6
        run: |
          curl -L https://github.com/grafana/k6/releases/download/v0.57.0/k6-v0.57.0-linux-amd64.tar.gz -o k6.tar.gz
          tar xzf k6.tar.gz
          sudo cp k6-v0.57.0-linux-amd64/k6 /usr/local/bin/
          k6 version

      - name: Setup Docker and Docker Compose
        uses: docker/setup-buildx-action@v2
        with:
          install: true

      - name: Calculate ports
        id: ports
        run: |
          PORT_OFFSET=$((${{ strategy.job-index }} + 1))
          
          echo "ERPC_HTTP_PORT=$((4000 + PORT_OFFSET))" >> $GITHUB_ENV
          echo "ERPC_METRICS_PORT=$((5000 + PORT_OFFSET))" >> $GITHUB_ENV
          echo "ERPC_PPROF_PORT=$((6000 + PORT_OFFSET))" >> $GITHUB_ENV

      - name: Set results directory
        id: set-dirs
        run: |
          RESULTS_DIR="test-results/${{ matrix.version }}/${{ matrix.variant }}/${{ matrix.blueprint }}"
          echo "RESULTS_DIR=${RESULTS_DIR}" >> $GITHUB_ENV
          mkdir -p "${RESULTS_DIR}/pprof"

      - name: Start eRPC
        uses: hoverkraft-tech/compose-action@v2.0.1
        env:
          COMPOSE_PROJECT_NAME: variant-${{ strategy.job-index }}
          ERPC_VERSION: ${{ matrix.version }}
          ERPC_HTTP_PORT: ${{ env.ERPC_HTTP_PORT }}
          ERPC_METRICS_PORT: ${{ env.ERPC_METRICS_PORT }}
          ERPC_PPROF_PORT: ${{ env.ERPC_PPROF_PORT }}
          LOG_LEVEL: ${{ github.event.inputs.log_level }}
          ALCHEMY_API_KEY: ${{ secrets.ALCHEMY_API_KEY }}
          # TENDERLY_ACCESS_KEY: ${{ secrets.TENDERLY_ACCESS_KEY }}
          # DWELLIR_API_KEY: ${{ secrets.DWELLIR_API_KEY }}
          BLAST_API_KEY: ${{ secrets.BLAST_API_KEY }}
          # CHAINSTACK_ARB_KEY: ${{ secrets.CHAINSTACK_ARB_KEY }}
          # CHAINSTACK_ETH_KEY: ${{ secrets.CHAINSTACK_ETH_KEY }}
          # CHAINSTACK_BASE_KEY: ${{ secrets.CHAINSTACK_BASE_KEY }}
          # QUICKNODE_ARB_ENDPOINT: ${{ secrets.QUICKNODE_ARB_ENDPOINT }}
          # QUICKNODE_ETH_ENDPOINT: ${{ secrets.QUICKNODE_ETH_ENDPOINT }}
          # QUICKNODE_BASE_ENDPOINT: ${{ secrets.QUICKNODE_BASE_ENDPOINT }}
          # ONFINALITY_API_KEY: ${{ secrets.ONFINALITY_API_KEY }}
        with:
          compose-file: variants/${{ matrix.variant }}/docker-compose.yml
          up-flags: "-d"

      - name: Wait for eRPC main service
        run: |
          MAX_RETRIES=10
          URL="http://localhost:${ERPC_HTTP_PORT}"
          echo "Waiting for eRPC to be ready... (0/$MAX_RETRIES) on $URL"
          for i in $(seq 1 $MAX_RETRIES); do
            if curl -sf $URL >/dev/null; then
              echo "eRPC is ready on $URL"
              exit 0
            fi
            echo "Waiting for eRPC to be ready... ($i/$MAX_RETRIES) on $URL"
            sleep 3
          done
          echo "eRPC failed to become ready on $URL"
          exit 1

      - name: Capture initial pprof heap profile
        run: |
          # Attempt to capture heap profile with retry logic
          MAX_RETRIES=3
          for i in $(seq 1 $MAX_RETRIES); do
            echo "Attempt $i to capture heap profile from http://localhost:${{ env.ERPC_PPROF_PORT }}/debug/pprof/heap"
            if curl -v "http://localhost:${{ env.ERPC_PPROF_PORT }}/debug/pprof/heap" \
               -o "${RESULTS_DIR}/pprof/heap-before.pprof"; then
              echo "Successfully captured initial heap profile"
              break
            fi
            if [ $i -eq $MAX_RETRIES ]; then
              echo "Failed to capture heap profile after $MAX_RETRIES attempts"
              exit 1
            fi
            echo "Attempt $i failed, retrying in 2 seconds..."
            sleep 2
          done

      - name: Run blueprint test (k6)
        if: contains(matrix.blueprint, 'k6/')
        run: |
          k6 run \
            --out json="${RESULTS_DIR}/results.json" \
            --out csv="${RESULTS_DIR}/metrics.csv" \
            "blueprints/${{ matrix.blueprint }}/run.js"
        env:
          ERPC_BASE_URL: "http://localhost:${{ env.ERPC_HTTP_PORT }}/main/evm/"

      - name: Capture final pprof heap profile
        if: always()
        run: |
          # Attempt to capture heap profile with retry logic
          MAX_RETRIES=3
          for i in $(seq 1 $MAX_RETRIES); do
            echo "Attempt $i to capture heap profile from http://localhost:${{ env.ERPC_PPROF_PORT }}/debug/pprof/heap"
            if curl -v "http://localhost:${{ env.ERPC_PPROF_PORT }}/debug/pprof/heap" \
               -o "${RESULTS_DIR}/pprof/heap-after.pprof"; then
              echo "Successfully captured final heap profile"
              break
            fi
            
            if [ $i -eq $MAX_RETRIES ]; then
              echo "Failed to capture heap profile after $MAX_RETRIES attempts"
              exit 1
            fi
            
            echo "Attempt $i failed, retrying in 2 seconds..."
            sleep 2
          done

      - name: Create safe artifact name
        id: safe-name
        run: |
          SAFE_NAME=$(echo "${{ matrix.version }}-${{ matrix.variant }}-${{ matrix.blueprint }}" | tr '/' '-')
          echo "name=${SAFE_NAME}" >> $GITHUB_OUTPUT

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.safe-name.outputs.name }}
          path: ${{ env.RESULTS_DIR }}
          retention-days: 30
          compression-level: 6
          overwrite: true
